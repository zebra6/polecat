#include "uf_t.h"
#include <stdio.h>
#include <stdlib.h>


/******************************************************************************
 *****************************************************************************/
uf_t::uf_t( int sz )
{
	int i = 0;

	u_count = sz;
	for( i = 0; i < sz; i++ )
		u_data.push_back( i );	
}


/******************************************************************************
 *****************************************************************************/
uf_t::~uf_t( void )
{
}


/******************************************************************************
 *****************************************************************************/
void uf_t::print( void )
{
	int i = 0;

	printf( "union find %p:\n", this );
	printf( "count: %i\n", u_count );
	printf( "data: " );
	
	for( i = 0; i < u_data.size(); i++ )
		printf( "%i ", u_data[i] );

	printf( "\n" );
	return;
}


/******************************************************************************
 *****************************************************************************/
int uf_t::find( int p )
{
	return u_data[p];
}


/******************************************************************************
 *****************************************************************************/
void uf_t::un( int p, int q )
{
	int i = 0;
	int p_id = find( p );
	int q_id = find( q );

	/*nothing to do*/
	if( p_id == q_id ) return;

	/*change values from p_id to q_id*/
	for( i = 0; i < u_data.size(); i++ )
		if( u_data[i] == p_id )
			u_data[i] = q_id;

	u_count--;
}


/******************************************************************************
 *****************************************************************************/
int uf_t::connected( int p, int q )
{
	return find( p ) == find( q );
}


